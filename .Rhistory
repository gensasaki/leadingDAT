install.packages("KFAS")
install.packages("dplyr")
install.packages("ggplot2")
library(KFAS)
getwd()
setwd("Work/R_projects/leadingDAT_LB1/")
getwd(  )
data <- read.delim("data/Weight.dat", sep=" ")
View(data)
mod <- SSModel(data ~ SSMtrend(1, Q = NA), H = NA)
typeof(data)
class(data)
mod <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
mod <- SSModel(data ~ SSMtrend(1, Q = NA), H = NA)
data
data <- read.delim("data/Weight.dat", sep=" ", header = False)
data <- read.delim("data/Weight.dat", sep=" ", header = FALSE)
data
mod <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
mod <- SSModel(data ~ SSMtrend(1, Q = NA), H = NA)
data <- read.delim("data/Weight.dat", sep=" ")
data <- read.delim("data/Weight.dat", sep=" ", header = FALSE)
Weight <- ts(data)
mod <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
save.image("~/Work/R_projects/leadingDAT_LB1/first.RData")
data <- read.delim("data/Weight.dat", sep=" ")
Weight <- ts(data)
mod <- SSModel(Weight ~ SSMtrend(1, Q=NA), H=NA)
fit <- fitSSM(mod, numeric(2), method="BFGS")
kfs <- KFS(fit$model
fit <-
fit
fit <- fitSSM(mod, numeric(2), method="BFGS")
kfs <- KFS(fit$model)
lim("data/Weight.dat", sep = " ", header = FALSE)
Weight <- ts(data)
# ローカルレベルモデルの定義
mod <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
# 未知パラメータQ, Hの推定（最尤法）
fit <- fitSSM(mod, numeric(2), method = "BFGS")
# カルマンフィルタ・カルマンスムーザの実行
kfs <- KFS(fit$model)
### 平滑化と欠測値の補完
# 平滑化状態の信頼区間
alphahatconf <- predict(fit$model,, interval = "confidence", level = 0.95)
# 欠測値の補完
data <- read.delim("data/Weight.dat", sep = " ", header = FALSE)
Weight <- ts(data)
# ローカルレベルモデルの定義
mod <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
# 未知パラメータQ, Hの推定（最尤法）
fit <- fitSSM(mod, numeric(2), method = "BFGS")
# カルマンフィルタ・カルマンスムーザの実行
kfs <- KFS(fit$model)
### 平滑化と欠測値の補完
# 平滑化状態の信頼区間
alphahatconf <- predict(fit$model,, interval = "confidence", level = 0.95)
# 欠測値の補完
WeightNA <- Weight[c(1:20, rep(NA, 20), 41:60)] # 21~40日目をNAに置き換え
modNA <- SSModel(weightNA ~ SSMtrend((1, Q = NA), H = NA))
modNA <- SSModel(WeightNA ~ SSMtrend((1, Q = NA), H = NA))
# 欠測値の補完
WeightNA <- Weight[c(1:20, rep(NA, 20), 41:60)] # 21~40日目をNAに置き換え
modNA <- SSModel(WeightNA ~ SSMtrend((1, Q = NA), H = NA))
modNA <- SSModel(WeightNA ~ SSMtrend(1, Q = NA), H = NA)
fitNA <- fitSSM(modNA, c(0, 0), method = "BFGS")
confNA <- predict(fitNA$model, interval = "confidence", level = 0.95)
preNA <- predict(fitNA$model, interval = "prediction", level = 0.95)
fit50 <- fitSSM(50, numeric(2), method = "BFGS")
## 長期予測
# 長期予測
mod50 <- SSModel(Weight[1:50] ~SSMtrend(1, Q = NA), H = NA)
fit50 <- fitSSM(50, numeric(2), method = "BFGS")
alphahatconf <- predict(fit$model,, interval = "confidence", level = 0.95)
# 欠測値の補完
WeightNA <- Weight[c(1:20, rep(NA, 20), 41:60)] # 21~40日目をNAに置き換え
modNA <- SSModel(WeightNA ~ SSMtrend(1, Q = NA), H = NA)
fitNA <- fitSSM(modNA, c(0, 0), method = "BFGS")
confNA <- predict(fitNA$model, interval = "confidence", level = 0.95)
preNA <- predict(fitNA$model, interval = "prediction", level = 0.95)
alphahatconf
fit50 <- fitSSM(mod50, numeric(2), method = "BFGS")
conf50 <- predict(fit50$model, interval = "confidence", n.ahead = 10)
pre50 <- predict(fit50$model, interval = "prediction", n.ahead = 10)
## 2変量ローカルレベルモデルの実装と推定結果
modSUTSE <- SSModel(cbind(Weight, Bodyfat) ~ SSMtrend(1, Q = matrix(NA, 2, 2)), H = matrix(NA, 2, 2))
data_bodyfat <- read.delim ("data/Bodyfat.dat", seq = " ", header = FALSE)
data_bodyfat <- read.delim ("data/Bodyfat.dat", seq = " ", header = FALSE)
data_bodyfat <- read.delim ("data/Bodyfat.dat", sep = " ", header = FALSE)
Bodyfat <- ts(data_bodyfat)
View(pre50)
View(pre50)
## 2変量ローカルレベルモデルの実装と推定結果
modSUTSE <- SSModel(cbind(Weight, Bodyfat) ~ SSMtrend(1, Q = matrix(NA, 2, 2)), H = matrix(NA, 2, 2))
fitSUTSE <- fitSSM(modSUTSE, numeric(6), method = "BFGS")
kfsSUTSE <- KFS(fitSUTSE$model)
kfsSUTSE
pre50
# モデル定義
mod1 <- SSModel(Weight ~ SSMtrend(1, Q = NA), H = NA)
mod2 <- SSModel(Weight ~ SSMtrend(2, Q = list(0, NA)), H = NA)
mod3 <- SSModel(Weight ~ SSMtrend(2, Q = list(NA, NA)), H = NA)
# 未知パラメータの推定
fit1 <- fitSSM(mod1, numeric(2), method = "BFGS")
fit2 <- fitSSM(mod2, numeric(2), method = "BFGS")
fit3 <- fitSSM(mod3, numeric(3), method = "BFGS")
# カルマンフィルタ・カルマンスムーザの実行
kfs1 <- KFS(fit1$model)
kfs2 <- KFS(fit2$model)
kfs3 <- KFS(fit3$model)
kfs3
## 対数尤度とAICによるモデル選択
# 対数尤度
logLik1 <- kfs1$logLik - sum(kfs1$Finf > 0) * log(2 * pi) / 2
logLik3 <- kfs3$logLik - sum(kfs3$Finf > 0) * log(2 * pi) / 2
# AIC
AIC1 <- -2 * logLik + 2 * (2 + 1)
# AIC
AIC1 <- -2 * logLik1 + 2 * (2 + 1)
AIC2 <- -2 * logLik1 + 2 * (2 + 1)
AIC2 <- -2 * logLik1 + 2 * (2 + 2)
AIC3 <- -2 * logLik1 + 2 * (3 + 2)
AIC1
AIC2
AIC3
logLik2 <- kfs2$logLik - sum(kfs2$Finf > 0) * log(2 * pi) / 2
logLik3 <- kfs3$logLik - sum(kfs3$Finf > 0) * log(2 * pi) / 2
# AIC
AIC1 <- -2 * logLik1 + 2 * (2 + 1)
AIC2 <- -2 * logLik1 + 2 * (2 + 2)
AIC3 <- -2 * logLik1 + 2 * (3 + 2)
View(kfsSUTSE)
## 基本構造時系列モデルの実装
sales <- read.csv("data/sales.csv")
## 基本構造時系列モデルの実装
sales <- read.csv("data/sales.csv", fileEncoding = "UTF-8")
## 基本構造時系列モデルの実装
sales <- read.csv("data/sales.csv")
